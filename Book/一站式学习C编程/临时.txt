indent  缩进
brace   括号
comma   逗号
Exclamation Mark    感叹号
angle bracket   尖括号
semicolon   分号
double quote 双引号
number sign/pound sign  #号

编译 V.S. 解释

语法 = Token + Structure
Token：字符是否合法，是否有这个字符，是否有这个缩写
Structure：符号之间的组织关系

转换说明 V.S. 转义序列
转义序列在编译时处理，转换说明是在运行时调用printf函数处理的
例：
    源代码
        printf("character: %c\ninteger:%d\nfloating point:%f\n", a,b,c);
    编译后
        

转换说明
%c  字符  
%d  整型
%f  浮点数

转义序列
\n  Line Feed   在老式打字机上，是进纸，喂纸，相当于跳到下一行
\r  Carriage Return 回到本行开头，其中Carriage是卷着纸的轴，每打一个字往右移一下
一般在win平台的文本文件用\r\n做换行符，许多应用层网络协议（如HTTP）也是，而Linux、UNIX平台中一般只用\n（待确认）



局部变量可以用常量，也可以用表达式来初始化；（类型相符的任意表达式）
全局变量只能用常量。（常量表达式，Constant Expression）
因为全局变量必须要在编译时就计算出来，而局部变量可以在运行时再计算。

全局变量在定义是，若不初始化，初始值为0；局部变量则不确定。

switch case 后面的值必须是常量表达式，是因为这个值要在编译时计算出来，同全局变量一样；浮点型不适合精确比较，所以case后面只能是整型常量表达式。

递归与循环其实是同一种东西，知识解决问题的思路不一样。
用递归解题，靠的是递推关系：n! = n*(n-1)!...
而用循环解，更像是把公式展开：n! = n*(n-1)*(n-2)...2*1
一般来说，公式展开更直观，因此循环容易理解；但有些时候（什么时候？），公式展开非常复杂甚至展不开，就变成了递归更加直观。

数组下标的表达式不仅可以表示存储单元中的值，也可以表示存储单元本身。即：既可以做左值也可以做右值。

后缀运算符：后缀++, 后缀--, 结构体去成员., 数组取下标[], 函数调用()
前缀（单目）运算符：前缀++, 前缀--, 正号+, 负号-, 逻辑非!

C语言中，后缀运算符优先级最高，前缀运算符其次，其他所有运算符都更低。
